/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

&studio_unlock

&led_strip { chain-length = <27>; };

/ {
    behaviors {
        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            label = "home-mod-left";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41>;
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "home-mod-right";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 1 2 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38 3>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        colemak {
            bindings = <
&kp TAB    &kp Q            &kp W            &kp F                &kp P              &kp B        &kp J    &kp L               &kp U                 &kp Y            &kp SEMI          &kp BSPC
&kp LCTRL  &hml LEFT_GUI A  &hml LEFT_ALT R  &hml LEFT_CONTROL S  &hml LEFT_SHIFT T  &kp G        &kp M    &hmr RIGHT_SHIFT N  &hmr RIGHT_CONTROL E  &hmr LEFT_ALT I  &hmr RIGHT_GUI O  &kp SQT
&kp LSHFT  &kp Z            &kp X            &kp C                &kp D              &kp V        &kp K    &kp H               &kp COMMA             &kp DOT          &kp FSLH          &kp ESC
                                             &kp LGUI             &mo 1              &kp SPACE    &kp RET  &mo 2               &kp LEFT_ALT
            >;
        };

        num-nav {
            bindings = <
&kp TAB    &kp N1  &kp N2  &kp N3    &kp N4  &kp N5       &kp N6         &kp N7    &kp N8        &kp N9        &kp N0     &kp BSPC
&trans     &trans  &trans  &trans    &trans  &trans       &kp PAGE_UP    &kp LEFT  &kp DOWN      &kp UP_ARROW  &kp RIGHT  &trans
&kp LSHFT  &trans  &trans  &trans    &trans  &trans       &kp PAGE_DOWN  &trans    &trans        &trans        &trans     &trans
                           &kp LGUI  &mo 3   &kp SPACE    &kp RET        &mo 3     &kp LEFT_ALT
            >;
        };

        symbols {
            bindings = <
&kp TAB    &kp EXCL  &kp AT  &kp HASH       &kp DLLR  &kp PRCNT    &kp CARET  &kp AMPS   &kp ASTRK  &kp LPAR  &kp RPAR              &kp DELETE
&kp LCTRL  &trans    &trans  &kp BACKSLASH  &trans    &trans       &kp MINUS  &kp EQUAL  &kp LBKT   &kp RBKT  &kp NON_US_BACKSLASH  &kp GRAVE
&kp LSHFT  &trans    &trans  &trans         &trans    &trans       &kp UNDER  &kp PLUS   &kp LBRC   &kp RBRC  &kp PIPE              &kp TILDE
                             &kp LGUI       &mo 5     &kp SPACE    &kp RET    &mo 5      &kp RALT
            >;
        };

        layers {
            bindings = <
&none  &none  &none  &none  &none  &none    &none  &none  &none  &none  &none  &none
&none  &none  &none  &to 0  &sl 5  &none    &none  &sl 4  &to 6  &none  &none  &none
&none  &none  &none  &none  &none  &none    &none  &none  &none  &none  &none  &none
                     &none  &none  &none    &none  &none  &none
            >;
        };

        os_kmp {
            bindings = <
&trans  &kp C_BRI_DN  &kp C_BRI_UP  &kp C_MUTE  &kp C_VOL_DN  &kp C_VOL_UP    &trans  &kp C_PREV  &kp C_PAUSE  &kp C_NEXT  &trans  &trans
&trans  &trans        &trans        &trans      &trans        &trans          &trans  &trans      &trans       &trans      &trans  &trans
&trans  &trans        &trans        &trans      &trans        &trans          &trans  &trans      &trans       &trans      &trans  &trans
                                    &trans      &trans        &trans          &trans  &trans      &trans
            >;
        };

        kbd_cfg {
            bindings = <
&soft_off   &trans        &trans        &trans        &trans        &trans          &trans           &trans  &rgb_ug RGB_SAI  &rgb_ug RGB_SAD  &trans                          &soft_off
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &rgb_ug RGB_BRI  &trans  &rgb_ug RGB_EFF  &rgb_ug RGB_EFR  &rgb_ug RGB_COLOR_HSB(0,0,100)  &rgb_ug RGB_TOG
&trans      &trans        &trans        &trans        &trans        &trans          &rgb_ug RGB_BRD  &trans  &trans           &trans           &trans                          &trans
                                        &trans        &trans        &trans          &trans           &trans  &trans
            >;
        };

        qwerty {
            bindings = <
&kp TAB    &kp Q  &kp W  &kp E     &kp R  &kp T        &kp Y    &kp U  &kp I      &kp O    &kp P     &kp BSPC
&kp LCTRL  &kp A  &kp S  &kp D     &kp F  &kp G        &kp H    &kp J  &kp K      &kp L    &kp SEMI  &kp SQT
&kp LSHFT  &kp Z  &kp X  &kp C     &kp V  &kp B        &kp N    &kp M  &kp COMMA  &kp DOT  &kp FSLH  &kp ESC
                         &kp LGUI  &mo 1  &kp SPACE    &kp RET  &mo 2  &kp RALT
            >;
        };
    };
};
